{"itemCount":3,"config":{"ttlInterval":250,"maximumItemCount":100,"targetPath":"feed.rss"},"feed":"<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss version=\"2.0\" xmlns:atom=\"http:\/\/www.w3.org\/2005\/Atom\" xmlns:content=\"http:\/\/purl.org\/rss\/1.0\/modules\/content\"><channel><title>Reed Taylor<\/title><description>Hi, I'm Reed üëãüèº<\/description><link>https:\/\/reedtaylor.org<\/link><language>en<\/language><lastBuildDate>Sun, 19 Jul 2020 14:54:57 -0700<\/lastBuildDate><pubDate>Sun, 19 Jul 2020 14:54:57 -0700<\/pubDate><ttl>250<\/ttl><atom:link href=\"https:\/\/reedtaylor.org\/feed.rss\" rel=\"self\" type=\"application\/rss+xml\"\/><item><guid isPermaLink=\"true\">https:\/\/reedtaylor.org\/posts\/new-project-scrum-wa<\/guid><title>Working with Blazor WebAssembly<\/title><description>Improving ScrumPokerCards<\/description><link>https:\/\/reedtaylor.org\/posts\/new-project-scrum-wa<\/link><pubDate>Sun, 24 May 2020 23:57:00 -0700<\/pubDate><content:encoded><![CDATA[<h1>Working with Blazor WebAssembly<\/h1><h2>Improving ScrumPokerCards<\/h2><p>Microsoft recently released the official production version of <a href=\"https:\/\/devblogs.microsoft.com\/aspnet\/blazor-webassembly-3-2-0-now-available\/\">Blazor WebAssebmly<\/a>. I decided to use a Razor Class Library to share code and create a Web Assembly version of the Poker Cards web app I made for Blazor Server. By using an interface for the VotingService, I was able to use the name components, pages, css, etc between the two apps so that way any UI or functionality changes cascade across both versions. Because Blazor WebAssembly can run on its own, I used a SignalR hub on the server to facilitate updates to the voting and stories and store a cache (similar to the Blazor Server cache) for team members joining late.<\/p><p>I was also able to clean up the UI a bit with a nice disconnection dialog if the SignalR connection is ever lost.<\/p><p>Blazor WebAssembly has been very nice to use so far and it has been freeing to write the view logic in C#\/.NET. Blazor WebAssembly is very powerful at this stage with the only downsides being its speed compared to other SPA frameworks and the Visual Studio support (debugging can be frustrating and Intellisense freaks out sometimes). These issues and more should be addressed with .NET 5 this fall.<\/p><p>I updated my <a href=\"https:\/\/poker.reedtaylor.org\">example server<\/a> to start using the WebAssembly version.<\/p><p>Check out my progress or contribute on <a href=\"https:\/\/github.com\/reedptaylor\/ScrumPokerCards\">GitHub<\/a><\/p>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">https:\/\/reedtaylor.org\/posts\/new-project-scrum<\/guid><title>Working with Blazor Server<\/title><description>Working with Blazor Server<\/description><link>https:\/\/reedtaylor.org\/posts\/new-project-scrum<\/link><pubDate>Fri, 1 May 2020 16:21:00 -0700<\/pubDate><content:encoded><![CDATA[<h1>Working with Blazor Server<\/h1><h2>New Project - ScrumPokerCards<\/h2><p>Hello, recently I became Scrum certified and one of the take aways from the trainings was that Poker card estimation is very difficult to do in distributed work environments. Because I have been doing a lot of work in Blazor Server lately, I decided to put together a simple Blazor Server app to allow for user story estimation during Sprint planning.<\/p><p>There are two screens, one for the Scrum Master and one for the rest of the Scrum Team. The Scrum Master screen allows the Scrum Master to enter the story name, stop the voting, and start a new story (or repeat to find consensus). The normal screen allows a user to enter a name and vote on the size of a story. After voting, they wait for the Scrum Master to end the voting revealing the votes (or change their vote before voting ends).<\/p><p>Blazor Server is very powerful, especially for a use case with only one team using the site (the variables are stored in a Singleton service). Check out my progress or contribute on <a href=\"https:\/\/github.com\/reedptaylor\/ScrumPokerCards\">GitHub<\/a><\/p>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">https:\/\/reedtaylor.org\/posts\/first-post<\/guid><title>Welcome to my new website!<\/title><description>Starting new blog\/portfolio website<\/description><link>https:\/\/reedtaylor.org\/posts\/first-post<\/link><pubDate>Sat, 8 Feb 2020 12:52:00 -0800<\/pubDate><content:encoded><![CDATA[<h1>Welcome to my new website!<\/h1><p>Hello, my name is Reed. I am a software engineering located in San Diego California. Currently, I work for Silvergate Bank and help them with their payments API and their Banking Portal (UI). I have had some fun projects done on the side such as my iOS apps Overdrive and Daiscover. As I continue to work on small projects for fun, I plan to post about them here.<\/p>]]><\/content:encoded><\/item><\/channel><\/rss>"}